<?php
header('Access-Control-Allow-Origin: *');
require_once "../../../bootstrap.php";

$taskId = (int) $_POST['taskId'];

$service = $serviceController->get($taskId)->setTimeController($timeController);
$stage = $service->getStage();

switch ($stage){
    case '0':
        $service->updateStage('1', $service->getManager()->getFullName())
            ->setServiceManager($userController->get( (int) $_POST['serviceManager']) )
            ->setAccounting($userController->get( (int) $_POST['accounting']) );

        $taskController->create($service->getServiceManager(), $taskListController->get(Entity\TaskList::SERVICE), $taskId);
        $taskController->create($service->getAccounting(), $taskListController->get(Entity\TaskList::SERVICE), $taskId);

        $push->push('You have a new service task!', $service->getServiceManager()->getToken());
        break;

    case '1':
        $service->updateStage('2', $service->getServiceManager()->getFullName())
            ->setPrice($_POST['price']);

        $push->push('A service task has been updated!', $service->getManager()->getToken());
        break;

    case '2':
        if (strcmp($_POST['action'], 'accept')==0){
            $service->updateStage('3', $service->getManager()->getFullName());

            $push->push('You have a new service task!', $service->getAccounting()->getToken());
        }
        else{
            $service->updateStage('1', $service->getManager()->getFullName())
                ->setManagerPrice($_POST['managerPrice']);

            $push->push('A service task has been rejected!', $service->getServiceManager()->getToken());
        }
        break;

    case '3':
        if (strcmp($_POST['action'], 'accept')==0){
            $service->updateStage('4', $service->getAccounting()->getFullName())
                ->setFinalPrice($service->getPrice());

            $push->push("A service task has been accepted by accounting!", $service->getServiceManager()->getToken());
        }
        else{
            $service->updateStage('2', $service->getAccounting()->getFullName())
                ->setFinalPrice($_POST['finalPrice']);

            $push->push('A service task has been rejected by accounting!', $service->getManager()->getToken());
        }
        break;

    case '4':
        $service->updateStage('5', $service->getServiceManager()->getFullName())
            ->setResultReport($_POST['resultReport'])
            ->setPickedUpBy($_POST['pickedUpBy'])
            ->setCheckedBy($_POST['checkedBy']);

        $push->push('A service task has been updated!', $service->getManager()->getToken());
        break;

    case '5':
        if (strcmp($_POST['action'], 'accept')==0){
            $service->updateStage('6', $service->getManager()->getFullName());
            $detail = $detailController->create($service->getManager()->getId(), $_POST['level'], $service->getCar()->getId());

            $push->push('You have a new detail task!', $service->getManager()->getToken());
            $push->pushWithNotice("Service task $taskId is complete!", $service->getManager(), $service->getServiceManager());

            /** @var \Entity\Selling $selling */
            if (($selling = $service->getSelling()) !== null ){
                $selling->setTimeController($timeController)
                    ->updateStage('7', "Auto generated by Service task- last step finished by {$service->getManager()->getFullName()}")
                    ->setDetail($detail);

                $push->pushWithNotice("Service for Selling {$selling->getId()} is done", $service->getManager(), $selling->getManager());
            }
        }
        else{
            $service->updateStage('6', $service->getManager()->getFullName());
            $serviceController->create($service->getCar()->cloneCar(), $service->getManager(), $service->getNote());

            $push->push('You have a new service task!', $service->getManager()->getToken());
            $push->pushWithNotice("Service task $taskId has been rejected!", $service->getManager(), $service->getServiceManager());
        }
        break;
}
$entityManager->flush();